import os
import io
import re
import logging
import requests
from datetime import datetime, timedelta
from collections import defaultdict

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
import openai

# ==== –ö–õ–Æ–ß–Ü ====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# ==== –õ–û–ì–ò ====
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ==== –ö–û–ù–§–Ü–ì –û–ë–ú–ï–ñ–ï–ù–¨ ====
# —Å–∫—ñ–ª—å–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å –Ω–∞ –¥–µ–Ω—å –º–æ–∂–µ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á (0 –∞–±–æ –º–µ–Ω—à–µ = –±–µ–∑ –¥–µ–Ω–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É)
IMG_LIMIT_PER_DAY = int(os.getenv("IMG_LIMIT_PER_DAY", "2"))

# –∫—É–ª–¥–∞—É–Ω –º—ñ–∂ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è–º–∏ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Å–µ–∫—É–Ω–¥–∏). –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 5 —Ö–≤ = 300—Å
IMG_COOLDOWN_SEC = int(os.getenv("IMG_COOLDOWN_SEC", "20"))

# –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–ª–æ–≤–∞/—Ç–µ–º–∏
BANNED_WORDS = [
    "—è–Ω—É–∫–æ–≤–∏—á", "–±–∞—Ç–æ–Ω", "–¥—É—Ä–∫–∞", "–¥—É—Ä–∫—É", "–¥—É—Ä–∫—É–≤–∞—Ç–∏",
    # –¥–æ–¥–∞–π —ñ–Ω—à—ñ —Å–ª–æ–≤–∞ –Ω–∞ —Å–≤—ñ–π —Ä–æ–∑—Å—É–¥
]

# ==== –ü–ê–ú'–Ø–¢–¨ –î–õ–Ø –õ–Ü–ß–ò–õ–¨–ù–ò–ö–Ü–í (RAM, –±–µ–∑ Redis) ====
# –î–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç: { (user_id, YYYYMMDD): count }
IMG_COUNTER_RAM = defaultdict(int)
# –ö—É–ª–¥–∞—É–Ω: { user_id: datetime_utc_–æ—Å—Ç–∞–Ω–Ω—å–æ—ó_—É—Å–ø—ñ—à–Ω–æ—ó_–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó }
LAST_IMG_TS_RAM: dict[int, datetime] = {}

def _today_tag() -> str:
    return datetime.utcnow().strftime("%Y%m%d")

def _img_quota_key(user_id: int) -> str:
    return f"{user_id}:{_today_tag()}"

def _fmt_tdelta(seconds: int) -> str:
    # –∫—Ä–∞—Å–∏–≤–∏–π —Ñ–æ—Ä–º–∞—Ç "X —Ö–≤ Y —Å"
    m, s = divmod(max(0, seconds), 60)
    if m and s:
        return f"{m} —Ö–≤ {s} —Å"
    if m:
        return f"{m} —Ö–≤"
    return f"{s} —Å"

def _check_cooldown(user_id: int) -> tuple[bool, int]:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–∏–Ω—É–≤ –∫—É–ª–¥–∞—É–Ω.
    –ü–æ–≤–µ—Ä—Ç–∞—î (allow, remain_seconds).
    """
    if IMG_COOLDOWN_SEC <= 0:
        return True, 0
    last_ts = LAST_IMG_TS_RAM.get(user_id)
    if not last_ts:
        return True, 0
    now = datetime.utcnow()
    delta = (now - last_ts).total_seconds()
    if delta >= IMG_COOLDOWN_SEC:
        return True, 0
    remain = int(IMG_COOLDOWN_SEC - delta)
    return False, remain

def _mark_cooldown(user_id: int):
    LAST_IMG_TS_RAM[user_id] = datetime.utcnow()

def inc_and_check_img_quota(user_id: int) -> tuple[bool, int]:
    """
    –ó–±—ñ–ª—å—à—É—î –¥–µ–Ω–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î (allow, left).
    –Ø–∫—â–æ –¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç –≤–∏–º–∫–Ω–µ–Ω–∏–π (<=0) ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î (True, -1).
    –Ø–∫—â–æ –ª—ñ–º—ñ—Ç –≤–∏—á–µ—Ä–ø–∞–Ω–æ ‚Äî (False, 0) —ñ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ù–ï –∑–±—ñ–ª—å—à—É—î.
    """
    limit = IMG_LIMIT_PER_DAY
    if limit <= 0:
        return True, -1  # –±–µ–∑ –¥–µ–Ω–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É
    key = _img_quota_key(user_id)
    current = IMG_COUNTER_RAM[key]
    if current >= limit:
        return False, 0
    IMG_COUNTER_RAM[key] = current + 1
    left = limit - IMG_COUNTER_RAM[key]
    return True, left

def prompt_has_banned_words(text: str) -> bool:
    t = (text or "").lower()
    for w in BANNED_WORDS:
        if w in t:
            return True
    return False

# ==== –ü–†–û–ú–ü–¢ –¢–ê –î–û–í–Ü–î–ö–ê ====
SYSTEM_PROMPT = (
    "–¢–∏ ‚Äî –ø–æ–º—ñ—á–Ω–∏–∫ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —á–∞—Ç—É Vibe-Coding. "
    "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, —á–µ–º–Ω–æ —Ç–∞ –ª–∞–∫–æ–Ω—ñ—á–Ω–æ. "
    "–¢—Ä–æ—Ö–∏ –¥—Ä—É–∂–Ω—å–æ—ó —ñ—Ä–æ–Ω—ñ—ó –æ–∫, –±–µ–∑ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—ñ."
)

def _help_text() -> str:
    daily = "–±–µ–∑ –ª—ñ–º—ñ—Ç—É –Ω–∞ –¥–µ–Ω—å" if IMG_LIMIT_PER_DAY <= 0 else f"–ª—ñ–º—ñ—Ç –Ω–∞ –¥–µ–Ω—å: {IMG_LIMIT_PER_DAY}"
    cd = f"{_fmt_tdelta(IMG_COOLDOWN_SEC)} –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏"
    return (
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/img <–æ–ø–∏—Å> ‚Äî –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —ñ–ª—é—Å—Ç—Ä–∞—Ü—ñ—é "
        f"({daily}, –∫—É–ª–¥–∞—É–Ω: {cd})\n"
        "/help ‚Äî –¥–æ–ø–æ–º–æ–≥–∞"
    )

# ==== –£–¢–ò–õ–Ü–¢–ò –î–õ–Ø –ó–û–ë–†–ê–ñ–ï–ù–¨ ====
def _download_to_bytes(url: str) -> bytes:
    logger.info("Downloading image from URL...")
    r = requests.get(url, timeout=45)
    r.raise_for_status()
    logger.info("Downloaded image bytes: %s", len(r.content))
    return r.content

def _image_create_url(prompt: str) -> tuple[str, str]:
    """
    –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ gpt-image-1; —è–∫—â–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ ‚Äî —Ñ–æ–ª–±–µ–∫ –Ω–∞ dall-e-3.
    –ü–æ–≤–µ—Ä—Ç–∞—î (url, model_name).
    """
    try:
        logger.info("Trying gpt-image-1...")
        resp = openai.Image.create(
            model="gpt-image-1",
            prompt=prompt,
            size="1024x1024",
            n=1
        )
        return resp["data"][0]["url"], resp.get("model", "gpt-image-1")
    except Exception as e:
        logger.warning("gpt-image-1 failed: %s ‚Äî falling back to dall-e-3", e)

    resp = openai.Image.create(
        model="dall-e-3",
        prompt=prompt,
        size="1024x1024",
        n=1
    )
    return resp["data"][0]["url"], resp.get("model", "dall-e-3")

# ==== –ö–û–ú–ê–ù–î–ò ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –î–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ ‚Äî /img <–æ–ø–∏—Å>. –î–ª—è –¥–æ–≤—ñ–¥–∫–∏ ‚Äî /help")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(_help_text())

async def img_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    prompt = " ".join(context.args).strip()

    if not prompt:
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å: /img <—â–æ –Ω–∞–º–∞–ª—é–≤–∞—Ç–∏>\n–ü—Ä–∏–∫–ª–∞–¥: /img –∫—ñ—Ç —É –º—É–ª—å—Ç—è—à–Ω–æ–º—É —Å—Ç–∏–ª—ñ"
        )
        return

    # 0) —Ñ—ñ–ª—å—Ç—Ä –Ω–µ–±–∞–∂–∞–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤
    if prompt_has_banned_words(prompt):
        await update.message.reply_text(
            "–¶–µ –±—ñ–ª—å—à–µ —Å—Ö–æ–∂–µ –Ω–∞ –º–µ–º. –î–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏—Ö –∂–∞—Ä—Ç–∏–∫—ñ–≤ —É –Ω–∞—Å –æ–∫—Ä–µ–º–∏–π –ø—Ä–æ—Å—Ç—ñ—Ä üòâ\n"
            "–¢—É—Ç —Ç—Ä–∏–º–∞—î–º–æ —Ñ–æ–∫—É—Å –Ω–∞ —Å–µ—Ä–π–æ–∑–Ω–æ–º—É –≤–∞–π–±-–∫–æ–¥–∏–Ω–≥—É."
        )
        return

    # 1) –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω—É (–Ω–µ —á–∞—Å—Ç—ñ—à–µ, –Ω—ñ–∂ 1 –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–∞ N —Å–µ–∫—É–Ω–¥)
    allow_cd, remain_sec = _check_cooldown(user_id)
    if not allow_cd:
        await update.message.reply_text(
            f"–ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–æ üòä –ó–∞—á–µ–∫–∞–π —â–µ {_fmt_tdelta(remain_sec)} –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é."
        )
        return

    # 2) –¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç (–º–æ–∂–Ω–∞ –≤–∏–º–∫–Ω—É—Ç–∏ IMG_LIMIT_PER_DAY<=0)
    allow_daily, left = inc_and_check_img_quota(user_id)
    if not allow_daily:
        await update.message.reply_text(
            "–¢–≤—ñ–π –ª—ñ–º—ñ—Ç –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏—á–µ—Ä–ø–∞–Ω–æ üòï\n"
            "–ü–æ–≤–µ—Ä–Ω–∏—Å—å –∑–∞–≤—Ç—Ä–∞ –∞–±–æ —Å—Ñ–æ—Ä–º—É–ª—é–π —Ç–µ—Ö–Ω—ñ—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏."
        )
        return

    # 3) –≥–µ–Ω–µ—Ä—É—î–º–æ
    try:
        url, model_used = _image_create_url(prompt)
        img_bytes = _download_to_bytes(url)
        bio = io.BytesIO(img_bytes); bio.name = "image.png"; bio.seek(0)
        suffix_daily = "" if left < 0 else f"  (–∑–∞–ª–∏—à–∏–ª–æ—Å—å –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {left})"
        await update.message.reply_photo(bio, caption=f"–ì–æ—Ç–æ–≤–æ ‚úÖ{suffix_daily}")
        logger.info("Image OK | model=%s | prompt='%s' | left=%s", model_used, prompt, left)
        _mark_cooldown(user_id)  # –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä –∫—É–ª–¥–∞—É–Ω—É —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
    except Exception as e:
        logger.exception("Image gen error: %s", e)
        await update.message.reply_text(
            "–ù–µ –≤–∏–π—à–ª–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è üòï –°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π –æ–ø–∏—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ¬´–º—É–ª—å—Ç—è—à–Ω–∏–π —Å—Ç–∏–ª—å¬ª)."
        )

# ==== –¢–ï–ö–°–¢–û–í–Ü –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø ====
async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    text = update.message.text.strip()

    # –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –≤ –≥—Ä—É–ø—ñ –ª–∏—à–µ —è–∫—â–æ —Ç–µ–≥–Ω—É–ª–∏ –∞–±–æ –Ω–∞–ø–∏—Å–∞–ª–∏ "–±–æ—Ç ..." –Ω–∞ –ø–æ—á–∞—Ç–∫—É
    bot_username = (context.bot.username or "").lower()
    entities = update.message.entities or []
    mentioned_bot = any(
        e.type == "mention" and
        text[e.offset:e.offset + e.length].lower() == f"@{bot_username}"
        for e in entities
    )
    starts_with_word = text.lower().startswith("–±–æ—Ç")
    if update.effective_chat.type != "private" and not (mentioned_bot or starts_with_word):
        return

    try:
        completion = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": text}
            ],
            temperature=0.4
        )
        reply = completion["choices"][0]["message"]["content"].strip()
        await update.message.reply_text(reply)
        usage = completion.get("usage", {})
        logger.info("Chat OK | model=%s | prompt=%s | completion=%s",
                    completion.get("model"), usage.get("prompt_tokens"), usage.get("completion_tokens"))
    except Exception as e:
        logger.exception("Text gen error: %s", e)
        await update.message.reply_text("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—ñ –®–Ü. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ üôè")

# ==== –û–ë–†–û–ë–ö–ê –ü–û–ú–ò–õ–û–ö ====
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Bot error: %s", context.error)

# ==== –ó–ê–ü–£–°–ö ====
def main():
    logger.info("Starting bot...")
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN is missing!")
    if not OPENAI_API_KEY:
        logger.error("OPENAI_API_KEY is missing!")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("img", img_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))
    app.add_error_handler(on_error)
    app.run_polling(drop_pending_updates=True, allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()

