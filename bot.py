import os
import io
import re
import logging
import requests
from collections import defaultdict, deque

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
import openai

# ==== –ö–õ–Æ–ß–Ü ====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# ==== –õ–û–ì–ò ====
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ==== –ü–ê–ú'–Ø–¢–¨ (–≤ RAM) ====
# –î–ª—è –∫–æ–∂–Ω–æ–≥–æ chat_id –∑–±–µ—Ä—ñ–≥–∞—î–º–æ deque –∑ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö N –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (user/assistant).
MAX_TURNS = int(os.getenv("MAX_TURNS", "12"))  # –ø–æ —á–µ—Ä–∑—ñ: user, assistant, ...
CHAT_MEMORY: dict[int, deque] = defaultdict(lambda: deque(maxlen=MAX_TURNS * 2))

def remember(chat_id: int, role: str, content: str):
    CHAT_MEMORY[chat_id].append({"role": role, "content": content})

def get_memory(chat_id: int):
    return list(CHAT_MEMORY[chat_id])

def clear_memory(chat_id: int):
    CHAT_MEMORY[chat_id].clear()

# ==== –°–ò–°–¢–ï–ú–ù–ò–ô –ü–†–û–ú–ü–¢ (–∂–æ—Ä—Å—Ç–∫–æ —Ñ—ñ–∫—Å—É—î —Ä–æ–ª—å) ====
SYSTEM_PROMPT = (
    "–¢–∏ ‚Äî –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ Vibe-Coding (Telegram-—á–∞—Ç). "
    "–ú—ñ—Å—ñ—è: ¬´–≤–∞–π–±-–∫–æ–¥–∏–Ω–≥¬ª ‚Äî –ª—é–¥–∏–Ω–∞ —Ñ–æ—Ä–º—É–ª—é—î —ñ–¥–µ—é, –®–Ü –¥–æ–ø–æ–º–∞–≥–∞—î –¥–æ–≤–æ–¥–∏—Ç–∏ –¥–æ –≥–æ—Ç–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É "
    "(—Å–∫—Ä–∏–ø—Ç–∏, –ø—Ä–æ–≥—Ä–∞–º–∏, –≤—ñ–¥–µ–æ, –∞—É–¥—ñ–æ —Ç–∞ —ñ–Ω—à—ñ –ø—Ä–æ–¥—É–∫—Ç–∏). "
    "–†–æ–ª—å –±–æ—Ç–∞: 1) –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é; 2) –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∑ —ñ–¥–µ—è–º–∏/–∫–æ–¥–æ–º; "
    "3) –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –¥—Ä—É–∂–Ω—ñ–π, –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ç–æ–Ω; 4) –∑–∞ –∑–∞–ø–∏—Ç–æ–º –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —ñ–ª—é—Å—Ç—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ API. "
    "–°—Ç–∏–ª—å: –≤–≤—ñ—á–ª–∏–≤–æ, –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ —Å—É—Ç—ñ. –î–æ–∑–≤–æ–ª–µ–Ω–∞ –ª–µ–≥–∫–∞, –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–∞ —ñ—Ä–æ–Ω—ñ—è –Ω–∞–¥ "
    "—Ç–∏–ø–æ–≤–∏–º–∏ –±–æ–ª—è–º–∏ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤ (\"–ø—Ä–∞—Ü—é—î –Ω–∞ –º–æ—ó–π –º–∞—à–∏–Ω—ñ\", –¥–µ–¥–ª–∞–π–Ω–∏, –±–∞–≥–∏), –±–µ–∑ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—ñ. "
    "–ó–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –º–æ–≤–∞ –Ω–µ–Ω–∞–≤–∏—Å—Ç—ñ, –¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞—Ü—ñ—è, –∑–∞–∫–ª–∏–∫–∏ –¥–æ –Ω–∞—Å–∏–ª—å—Å—Ç–≤–∞. "
    "–£ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –∑–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è —Ç–µ–≥–æ–º –∞–±–æ –∑—ñ —Å–ª–æ–≤–∞ ¬´–±–æ—Ç¬ª, –∞ —Ç–∞–∫–æ–∂ –Ω–∞ /img —Ç–∞ /imgtest. "
    "–ü—Ä–æ —Å–ø—ñ–ª—å–Ω–æ—Ç—É: –¥—ñ–ª–∏–º–æ—Å—å –¥–æ—Å–≤—ñ–¥–æ–º, —ñ–¥–µ—è–º–∏, –∫–æ–¥–æ–º —ñ –¥–æ–ø–æ–º–∞–≥–∞—î–º–æ –æ–¥–Ω–µ –æ–¥–Ω–æ–º—É. "
    "–°–∞–π—Ç: vibe-coding.com.ua. –í—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç—Ä–∏–º–∞–π –≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ."
)

# ==== –°–¢–ê–¢–ò–ß–ù–Ü –¢–ï–ö–°–¢–ò ====
HELP_TEXT = (
    "üëã Vibe-Coding –ø–æ–º—ñ—á–Ω–∏–∫\n\n"
    "–ö–æ–º–∞–Ω–¥–∏:\n"
    "‚Ä¢ /about ‚Äî —Ö—Ç–æ —è —ñ –Ω–∞–≤—ñ—â–æ\n"
    "‚Ä¢ /img <–æ–ø–∏—Å> ‚Äî –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —ñ–ª—é—Å—Ç—Ä–∞—Ü—ñ—é (–Ω–∞–ø—Ä.: /img –∫—ñ—Ç —É –º—É–ª—å—Ç—è—à–Ω–æ–º—É —Å—Ç–∏–ª—ñ)\n"
    "‚Ä¢ /imgtest ‚Äî —Ç–µ—Å—Ç –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è\n"
    "‚Ä¢ /context ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏, —â–æ –±–æ—Ç –ø–∞–º'—è—Ç–∞—î (–æ—Å—Ç–∞–Ω–Ω—ñ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç)\n"
    "‚Ä¢ /reset ‚Äî –æ—á–∏—Å—Ç–∏—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É\n"
    "‚Ä¢ /help ‚Äî –¥–æ–≤—ñ–¥–∫–∞\n\n"
    "–£ –≥—Ä—É–ø—ñ –±–æ—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î, —è–∫—â–æ —Ç–µ–≥–Ω—É—Ç–∏ @–±–æ—Ç–∞ –∞–±–æ –ø–æ—á–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ª–æ–≤–∞ ¬´–±–æ—Ç¬ª."
)

START_TEXT = (
    "–ü—Ä–∏–≤—ñ—Ç! –Ø –∞—Å–∏—Å—Ç–µ–Ω—Ç —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ Vibe-Coding üá∫üá¶\n"
    "–ü–∞–º'—è—Ç–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç —É –º–µ–∂–∞—Ö —Ü—å–æ–≥–æ —á–∞—Ç—É (–æ—Å—Ç–∞–Ω–Ω—ñ–π –¥—ñ–∞–ª–æ–≥), –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –∫–æ–¥–æ–º —ñ –≥–µ–Ω–µ—Ä–∏—Ç–∏ —ñ–ª—é—Å—Ç—Ä–∞—Ü—ñ—ó.\n"
    "–ö–æ–º–∞–Ω–¥–∏: /about, /img, /imgtest, /context, /reset, /help."
)

ABOUT_TEXT = (
    "–Ø ‚Äî –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ Vibe-Coding. "
    "–ú–∏ –ø—Ä–∞–∫—Ç–∏–∫—É—î–º–æ ¬´–≤–∞–π–±-–∫–æ–¥–∏–Ω–≥¬ª: —Ç–∏ —Ñ–æ—Ä–º—É–ª—é—î—à —ñ–¥–µ—é, –∞ –®–Ü –¥–æ–ø–æ–º–∞–≥–∞—î –∑—Ä–æ–±–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –≤—ñ–¥ —Å–∫—Ä–∏–ø—Ç—ñ–≤ "
    "—Ç–∞ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—ñ–≤ –¥–æ –≤—ñ–¥–µ–æ –π –∞—É–¥—ñ–æ. –Ø –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –¥–∞—é –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø—ñ–¥–∫–∞–∑–∫–∏, "
    "—ñ–Ω–∫–æ–ª–∏ –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–æ –ø—ñ–¥–∂–∞—Ä—Ç–æ–≤—É—é –Ω–∞–¥ –≤—ñ—á–Ω–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –¥–µ–≤—ñ–≤, —ñ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ –≥–µ–Ω–µ—Ä—É—é —ñ–ª—é—Å—Ç—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ /img. "
    "–°–∞–π—Ç: vibe-coding.com.ua. –©–æ–± —Å—Ç–µ—Ä—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: /reset."
)

# ==== –£–¢–ò–õ–Ü–¢–ò –î–õ–Ø –ó–û–ë–†–ê–ñ–ï–ù–¨ ====
def _download_to_bytes(url: str) -> bytes:
    logger.info("Downloading image from URL...")
    r = requests.get(url, timeout=45)
    r.raise_for_status()
    logger.info("Downloaded image bytes: %s", len(r.content))
    return r.content

def _image_create_url(prompt: str) -> tuple[str, str]:
    """
    –°–ø–æ—á–∞—Ç–∫—É gpt-image-1; —è–∫—â–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ openai==0.28 —á–∏ –≤ –∞–∫–∞—É–Ω—Ç—ñ ‚Äî —Ñ–æ–ª–±–µ–∫ –Ω–∞ dall-e-3.
    –ü–æ–≤–µ—Ä—Ç–∞—î (url, model_name).
    """
    try:
        logger.info("Trying gpt-image-1...")
        resp = openai.Image.create(
            model="gpt-image-1",
            prompt=prompt,
            size="1024x1024",
            n=1
        )
        model_used = resp.get("model", "gpt-image-1")
        logger.info("OpenAI image model used: %s", model_used)
        return resp["data"][0]["url"], model_used
    except Exception as e:
        logger.warning("gpt-image-1 failed: %s ‚Äî falling back to dall-e-3", e)

    logger.info("Trying dall-e-3...")
    resp = openai.Image.create(
        model="dall-e-3",
        prompt=prompt,
        size="1024x1024",
        n=1
    )
    model_used = resp.get("model", "dall-e-3")
    logger.info("OpenAI image model used: %s", model_used)
    return resp["data"][0]["url"], model_used

# ==== –•–ï–õ–ü–ï–†–ò –î–õ–Ø "–•–¢–û –¢–ò" ====
ABOUT_PATTERNS = re.compile(
    r"\b(—Ö—Ç–æ\s+—Ç–∏|—Ö—Ç–æ\s+—Ç–∞–∫–∏–π|–¥–ª—è\s+—á–æ–≥–æ\s+—Ç–∏|–Ω–∞–≤—ñ—â–æ\s+—Ç–∏|—â–æ\s+—Ç–∏\s+—Ä–æ–±–∏—à|—è–∫–∞\s+—Ç–≤–æ—è\s+—Ä–æ–ª—å)\b",
    re.IGNORECASE
)
def looks_like_about_question(text: str) -> bool:
    return bool(ABOUT_PATTERNS.search((text or "").strip()))

# ==== –ó–ë–Ü–†–ö–ê –ü–†–û–ú–ü–¢–ê –ó –ö–û–ù–¢–ï–ö–°–¢–û–ú ====
def build_messages(chat_id: int, user_text: str):
    """
    –í–∫–ª—é—á–∞—î —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç + –ø–æ–ø–µ—Ä–µ–¥–Ω—é —ñ—Å—Ç–æ—Ä—ñ—é —Ü—å–æ–≥–æ —á–∞—Ç—É + –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    history = get_memory(chat_id)
    messages = [{"role": "system", "content": SYSTEM_PROMPT}]
    # –ü—ñ–¥—Ä—ñ–∑–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é, —è–∫—â–æ –≤–æ–Ω–∞ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞ ‚Äî deque –≤–∂–µ –æ–±–º–µ–∂—É—î maxlen
    messages.extend(history)
    messages.append({"role": "user", "content": user_text})
    return messages

# ==== –ö–û–ú–ê–ù–î–ò ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(START_TEXT)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT)

async def about_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(ABOUT_TEXT)

async def context_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    mem = get_memory(chat_id)
    if not mem:
        await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π. –ü–æ—á–∏–Ω–∞–π –Ω–æ–≤—É —Ä–æ–∑–º–æ–≤—É üôÇ")
        return
    # –ø–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –¥–æ 6 –ø–∞—Ä (12 –∑–∞–ø–∏—Å—ñ–≤)
    shown = mem[-12:]
    preview = []
    for m in shown:
        role = "üë§" if m["role"] == "user" else "ü§ñ"
        text = m["content"]
        if len(text) > 220:
            text = text[:220] + "‚Ä¶"
        preview.append(f"{role} {text}")
    await update.message.reply_text("–ü–æ—Ç–æ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n\n" + "\n\n".join(preview))

async def reset_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    clear_memory(chat_id)
    await update.message.reply_text("–û–∫, –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É –æ—á–∏—â–µ–Ω–æ üßπ")

async def imgtest_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("IMGTEST TRIGGERED by %s", update.effective_user.id)
    prompt = "cute cartoon turtle with big eyes, bright colors, simple background, 2D illustration"
    try:
        url, model_used = _image_create_url(prompt)
        img_bytes = _download_to_bytes(url)
        bio = io.BytesIO(img_bytes); bio.name = "image.png"; bio.seek(0)
        await update.message.reply_photo(bio, caption=f"–ì–æ—Ç–æ–≤–æ ‚úÖ (—Ç–µ—Å—Ç, –º–æ–¥–µ–ª—å: {model_used})")
        logger.info("Image OK | model=%s | prompt='%s'", model_used, prompt)
    except Exception as e:
        logger.exception("Image gen error (imgtest): %s", e)
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {e}")

async def img_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = " ".join(context.args).strip()
    logger.info("IMG TRIGGERED by %s | prompt='%s'", update.effective_user.id, prompt)
    if not prompt:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å: /img <—â–æ –Ω–∞–º–∞–ª—é–≤–∞—Ç–∏>\n–ü—Ä–∏–∫–ª–∞–¥: /img –∫—ñ—Ç —É –º—É–ª—å—Ç—è—à–Ω–æ–º—É —Å—Ç–∏–ª—ñ")
        return

    try:
        url, model_used = _image_create_url(prompt)
        img_bytes = _download_to_bytes(url)
        bio = io.BytesIO(img_bytes); bio.name = "image.png"; bio.seek(0)
        await update.message.reply_photo(bio, caption=f"–ì–æ—Ç–æ–≤–æ ‚úÖ")
        logger.info("Image OK | model=%s | prompt='%s'", model_used, prompt)
        # –ó–±–µ—Ä–µ–∂–µ–º–æ —Å–∞–º –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ —á–∞—Å—Ç–∏–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (–∫–æ—Ä–∏—Å–Ω–æ)
        remember(update.effective_chat.id, "user", f"[–ó–∞–ø–∏—Ç –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è] {prompt}")
        remember(update.effective_chat.id, "assistant", "[–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —ñ–ª—é—Å—Ç—Ä–∞—Ü—ñ—é]")
    except Exception as e:
        logger.exception("Image gen error: %s", e)
        await update.message.reply_text(f"–ù–µ –≤–∏–π—à–ª–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è üòï\n–ü–æ–º–∏–ª–∫–∞: {e}")

# ==== –¢–ï–ö–°–¢–û–í–Ü –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø (–∑ –ø–∞–º'—è—Ç—Ç—é) ====
async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    text = update.message.text.strip()
    chat_id = update.effective_chat.id

    # –í –≥—Ä—É–ø—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ç–µ–≥–Ω—É–ª–∏ –∞–±–æ –∑–≤–µ—Ä–Ω—É–ª–∏—Å—å "–±–æ—Ç ..."
    bot_username = (context.bot.username or "").lower()
    entities = update.message.entities or []
    mentioned_bot = any(
        e.type == "mention" and
        text[e.offset:e.offset + e.length].lower() == f"@{bot_username}"
        for e in entities
    )
    starts_with_word = text.lower().startswith("–±–æ—Ç")
    if update.effective_chat.type != "private" and not (mentioned_bot or starts_with_word):
        return

    # –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π about –±–µ–∑ LLM
    if looks_like_about_question(text):
        await update.message.reply_text(ABOUT_TEXT)
        # —Ç–µ–∂ –∫–ª–∞–¥–µ–º–æ —É –ø–∞–º'—è—Ç—å (–∫–æ—Ä–∏—Å–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π)
        remember(chat_id, "user", text)
        remember(chat_id, "assistant", ABOUT_TEXT)
        return

    # –ó–±–∏—Ä–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —ñ—Å—Ç–æ—Ä—ñ—ó
    messages = build_messages(chat_id, text)

    try:
        completion = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=messages,
            temperature=0.4
        )
        reply = completion["choices"][0]["message"]["content"].strip()
        await update.message.reply_text(reply)
        usage = completion.get("usage", {})
        logging.info("Chat OK | model=%s | prompt=%s | completion=%s",
                     completion.get("model"), usage.get("prompt_tokens"), usage.get("completion_tokens"))

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞–º'—è—Ç—å: –¥–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ö—ñ–¥
        remember(chat_id, "user", text)
        remember(chat_id, "assistant", reply)

    except Exception as e:
        logger.exception("Text gen error: %s", e)
        await update.message.reply_text("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—ñ –®–Ü. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ üôè")

# ==== –û–ë–†–û–ë–ö–ê –ü–û–ú–ò–õ–û–ö ====
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Bot error: %s", context.error)

# ==== –ó–ê–ü–£–°–ö ====
def main():
    logger.info("Starting bot...")
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN is missing!")
    if not OPENAI_API_KEY:
        logger.error("OPENAI_API_KEY is missing!")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("about", about_cmd))
    app.add_handler(CommandHandler("context", context_cmd))
    app.add_handler(CommandHandler("reset", reset_cmd))
    app.add_handler(CommandHandler("imgtest", imgtest_cmd))
    app.add_handler(CommandHandler("img", img_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))
    app.add_error_handler(on_error)
    app.run_polling(drop_pending_updates=True, allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
