import os
import io
import logging
import requests

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
import openai

# ==== –ö–õ–Æ–ß–Ü ====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# ==== –õ–û–ì–ò ====
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ==== –°–ò–°–¢–ï–ú–ù–ò–ô –ü–†–û–ú–ü–¢ (—Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π, —â–æ–± –±–æ—Ç "–ø–∞–º‚Äô—è—Ç–∞–≤", —Ö—Ç–æ –≤—ñ–Ω) ====
SYSTEM_PROMPT = (
    "–¢–∏ ‚Äî –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ Vibe-Coding (Telegram-—á–∞—Ç). "
    "–ú—ñ—Å—ñ—è —Å–ø—ñ–ª—å–Ω–æ—Ç–∏: ¬´–≤–∞–π–±-–∫–æ–¥–∏–Ω–≥¬ª ‚Äî –ª—é–¥–∏–Ω–∞ —Ñ–æ—Ä–º—É–ª—é—î —ñ–¥–µ—é, –®–Ü –¥–æ–ø–æ–º–∞–≥–∞—î —Ä–æ–±–∏—Ç–∏ –≥–æ—Ç–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç "
    "(—Å–∫—Ä–∏–ø—Ç–∏, –ø—Ä–æ–≥—Ä–∞–º–∏, –≤—ñ–¥–µ–æ, –∞—É–¥—ñ–æ —Ç–∞ —ñ–Ω—à—ñ –ø—Ä–æ–¥—É–∫—Ç–∏). "
    "–ì–æ–ª–æ–≤–Ω—ñ —Ä–æ–ª—ñ –±–æ—Ç–∞: 1) –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é; "
    "2) –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∑ —ñ–¥–µ—è–º–∏/–∫–æ–¥–æ–º; 3) –±—É—Ç–∏ –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º —Ç–æ–Ω—É; "
    "4) –∑–∞ –∑–∞–ø–∏—Ç–æ–º –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —ñ–ª—é—Å—Ç—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ API. "
    "–¢–≤—ñ–π —Å—Ç–∏–ª—å: –≤–≤—ñ—á–ª–∏–≤–∏–π, –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–π, –ø—Ä–∞–∫—Ç–∏—á–Ω–∏–π. –î–æ–∑–≤–æ–ª–µ–Ω–∞ –ª–µ–≥–∫–∞ (–¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–∞) —ñ—Ä–æ–Ω—ñ—è –Ω–∞–¥ "
    "—Ç–∏–ø–æ–≤–∏–º–∏ –±–æ–ª—è–º–∏ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤ (—Ç–∏–ø—É –±–∞–≥—ñ–≤, –¥–µ–¥–ª–∞–π–Ω—ñ–≤, –∫–∞–≤–∏), –∞–ª–µ –±–µ–∑ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—ñ —á–∏ –ø—Ä–∏–Ω–∏–∂–µ–Ω—å. "
    "–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–∞–≤–∏–ª–∞: "
    "- –ü–æ–≤–∞–∂–∞–π —É—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤, –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–æ–≤—É –Ω–µ–Ω–∞–≤–∏—Å—Ç—ñ —á–∏ –¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞—Ü—ñ—é. "
    "- –£–Ω–∏–∫–∞–π –æ–±—Ä–∞–∑, –ø—Ä–∏–Ω–∏–∂–µ–Ω–Ω—è, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –∞—Ç–∞–∫ –∞–±–æ –∑–∞–∫–ª–∏–∫—ñ–≤ –¥–æ –Ω–∞—Å–∏–ª—å—Å—Ç–≤–∞. "
    "- –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É, –∫–æ—Ä–æ—Ç–∫–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É –π —Å—Ç–≤–æ—Ä–∏ —ñ–ª—é—Å—Ç—Ä–∞—Ü—ñ—é. "
    "- –Ø–∫—â–æ –∑–∞–ø–∏—Ç –ø–æ—Ä—É—à—É—î –ø—Ä–∞–≤–∏–ª–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ö–µ–π—Ç/–Ω–∞—Å–∏–ª—å—Å—Ç–≤–æ), –≤–≤—ñ—á–ª–∏–≤–æ –≤—ñ–¥–º–æ–≤—Å—è —ñ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –±–µ–∑–ø–µ—á–Ω—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É. "
    "- –î–ª—è –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ª–∏—à–µ –∫–æ–ª–∏ —Ç–µ–±–µ —è–≤–Ω–æ –∑–≥–∞–¥–∞–ª–∏ —Ç–µ–≥–æ–º –∞–±–æ –∑–≤–µ—Ä–Ω—É–ª–∏—Å—è —Å–ª–æ–≤–æ–º ¬´–±–æ—Ç¬ª, "
    "–∞ —Ç–∞–∫–æ–∂ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏ /img —Ç–∞ /imgtest. "
    "–ü—Ä–æ —Å–ø—ñ–ª—å–Ω–æ—Ç—É: —Ç—É—Ç –¥—ñ–ª–∏–º–æ—Å—è –¥–æ—Å–≤—ñ–¥–æ–º, —ñ–¥–µ—è–º–∏, –∫–æ–¥–æ–º —ñ –¥–æ–ø–æ–º–∞–≥–∞—î–º–æ –æ–¥–Ω–µ –æ–¥–Ω–æ–º—É. "
    "–°–∞–π—Ç —Å–ø—ñ–ª—å–Ω–æ—Ç–∏: vibe-coding.com.ua (—Ç–æ—á–∫–∞ –∑–±–æ—Ä—É –≤–∞–π–±-–∫–æ–¥–µ—Ä—ñ–≤)."
)

HELP_TEXT = (
    "üëã –ü—Ä–∏–≤—ñ—Ç —É Vibe-Coding!\n\n"
    "–ö–æ–º–∞–Ω–¥–∏:\n"
    "‚Ä¢ /img <–æ–ø–∏—Å> ‚Äî –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —ñ–ª—é—Å—Ç—Ä–∞—Ü—ñ—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /img –∫—ñ—Ç —É –º—É–ª—å—Ç—è—à–Ω–æ–º—É —Å—Ç–∏–ª—ñ)\n"
    "‚Ä¢ /imgtest ‚Äî —Ç–µ—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏\n"
    "‚Ä¢ /help ‚Äî —Ü—è –ø—ñ–¥–∫–∞–∑–∫–∞\n\n"
    "–£ –≥—Ä—É–ø—ñ –±–æ—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î, —è–∫—â–æ —Ç–µ–≥–Ω—É—Ç–∏ @–±–æ—Ç–∞ –∞–±–æ –ø–æ—á–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ª–æ–≤–∞ ¬´–±–æ—Ç¬ª."
)

START_TEXT = (
    "–ü—Ä–∏–≤—ñ—Ç! –Ø –∞—Å–∏—Å—Ç–µ–Ω—Ç —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ Vibe-Coding üá∫üá¶\n"
    "–Ø –¥–æ–ø–æ–º–∞–≥–∞—é –∑ —ñ–¥–µ—è–º–∏, –∫–æ–¥–æ–º —ñ –º–æ–∂—É –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —ñ–ª—é—Å—Ç—Ä–∞—Ü—ñ—ó.\n"
    "–°–ø—Ä–æ–±—É–π: /img –∫—ñ—Ç —É –º—É–ª—å—Ç—è—à–Ω–æ–º—É —Å—Ç–∏–ª—ñ\n"
    "–ê–±–æ –Ω–∞–ø–∏—à–∏ ¬´–±–æ—Ç –ø—ñ–¥–∫–∞–∂–∏ —è–∫‚Ä¶¬ª —É –≥—Ä—É–ø—ñ."
)

# ==== –£–¢–ò–õ–Ü–¢–ò –î–õ–Ø –ó–û–ë–†–ê–ñ–ï–ù–¨ ====
def _download_to_bytes(url: str) -> bytes:
    logger.info("Downloading image from URL...")
    r = requests.get(url, timeout=45)
    r.raise_for_status()
    logger.info("Downloaded image bytes: %s", len(r.content))
    return r.content

def _image_create_url(prompt: str) -> tuple[str, str]:
    """
    –°–ø–æ—á–∞—Ç–∫—É gpt-image-1; —è–∫—â–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ openai==0.28 —á–∏ –≤ –∞–∫–∞—É–Ω—Ç—ñ ‚Äî —Ñ–æ–ª–±–µ–∫ –Ω–∞ dall-e-3.
    –ü–æ–≤–µ—Ä—Ç–∞—î (url, model_name).
    """
    try:
        logger.info("Trying gpt-image-1...")
        resp = openai.Image.create(
            model="gpt-image-1",
            prompt=prompt,
            size="1024x1024",
            n=1
        )
        model_used = resp.get("model", "gpt-image-1")
        logger.info("OpenAI image model used: %s", model_used)
        return resp["data"][0]["url"], model_used
    except Exception as e:
        logger.warning("gpt-image-1 failed: %s ‚Äî falling back to dall-e-3", e)

    logger.info("Trying dall-e-3...")
    resp = openai.Image.create(
        model="dall-e-3",
        prompt=prompt,
        size="1024x1024",
        n=1
    )
    model_used = resp.get("model", "dall-e-3")
    logger.info("OpenAI image model used: %s", model_used)
    return resp["data"][0]["url"], model_used

# ==== –ö–û–ú–ê–ù–î–ò ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(START_TEXT)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT)

async def imgtest_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("IMGTEST TRIGGERED by %s", update.effective_user.id)
    prompt = "cute cartoon turtle with big eyes, bright colors, simple background, 2D illustration"
    try:
        url, model_used = _image_create_url(prompt)
        img_bytes = _download_to_bytes(url)
        bio = io.BytesIO(img_bytes); bio.name = "image.png"; bio.seek(0)
        await update.message.reply_photo(bio, caption=f"–ì–æ—Ç–æ–≤–æ ‚úÖ (—Ç–µ—Å—Ç, –º–æ–¥–µ–ª—å: {model_used})")
        logger.info("Image OK | model=%s | prompt='%s'", model_used, prompt)
    except Exception as e:
        logger.exception("Image gen error (imgtest): %s", e)
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {e}")

async def img_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = " ".join(context.args).strip()
    logger.info("IMG TRIGGERED by %s | prompt='%s'", update.effective_user.id, prompt)
    if not prompt:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å: /img <—â–æ –Ω–∞–º–∞–ª—é–≤–∞—Ç–∏>\n–ü—Ä–∏–∫–ª–∞–¥: /img –∫—ñ—Ç —É –º—É–ª—å—Ç—è—à–Ω–æ–º—É —Å—Ç–∏–ª—ñ")
        return

    try:
        url, model_used = _image_create_url(prompt)
        img_bytes = _download_to_bytes(url)
        bio = io.BytesIO(img_bytes); bio.name = "image.png"; bio.seek(0)
        await update.message.reply_photo(bio, caption=f"–ì–æ—Ç–æ–≤–æ ‚úÖ")
        logger.info("Image OK | model=%s | prompt='%s'", model_used, prompt)
    except Exception as e:
        logger.exception("Image gen error: %s", e)
        await update.message.reply_text(f"–ù–µ –≤–∏–π—à–ª–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è üòï\n–ü–æ–º–∏–ª–∫–∞: {e}")

# ==== –¢–ï–ö–°–¢–û–í–Ü –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø ====
async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    text = update.message.text.strip()

    # –í –≥—Ä—É–ø—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ç–µ–≥–Ω—É–ª–∏ –∞–±–æ –∑–≤–µ—Ä–Ω—É–ª–∏—Å—å "–±–æ—Ç ..."
    bot_username = (context.bot.username or "").lower()
    entities = update.message.entities or []
    mentioned_bot = any(
        e.type == "mention" and
        text[e.offset:e.offset + e.length].lower() == f"@{bot_username}"
        for e in entities
    )
    starts_with_word = text.lower().startswith("–±–æ—Ç")
    if not (mentioned_bot or starts_with_word):
        return

    try:
        completion = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": text}
            ],
            temperature=0.4
        )
        reply = completion["choices"][0]["message"]["content"].strip()
        await update.message.reply_text(reply)
        usage = completion.get("usage", {})
        logging.info("Chat OK | model=%s | prompt=%s | completion=%s",
                     completion.get("model"), usage.get("prompt_tokens"), usage.get("completion_tokens"))
    except Exception as e:
        logger.exception("Text gen error: %s", e)
        await update.message.reply_text("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—ñ –®–Ü. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ üôè")

# ==== –û–ë–†–û–ë–ö–ê –ü–û–ú–ò–õ–û–ö ====
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Bot error: %s", context.error)

# ==== –ó–ê–ü–£–°–ö ====
def main():
    logger.info("Starting bot...")
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN is missing!")
    if not OPENAI_API_KEY:
        logger.error("OPENAI_API_KEY is missing!")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("imgtest", imgtest_cmd))
    app.add_handler(CommandHandler("img", img_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))
    app.add_error_handler(on_error)
    app.run_polling(drop_pending_updates=True, allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
