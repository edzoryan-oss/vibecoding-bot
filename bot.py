import os
import io
import re
import logging
import requests

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
import openai

# ====== –ö–õ–Æ–ß–Ü ===============================================================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# ====== –õ–û–ì–ò ================================================================
logging.basicConfig(level=logging.INFO)

# ====== –°–ò–°–¢–ï–ú–ù–ò–ô –ü–†–û–ú–ü–¢ ====================================================
SYSTEM_PROMPT = (
    "–¢–∏ ‚Äî –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —á–∞—Ç—É Vibe-Coding. "
    "–ú–µ—Ç–∞ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏: –≤–∞–π–±-–∫–æ–¥–∏–Ω–≥ ‚Äî —ñ–¥–µ—ó —Ñ–æ—Ä–º—É–ª—é—î –ª—é–¥–∏–Ω–∞, –∫–æ–¥ –ø–∏—à–µ –®–Ü. "
    "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, —á–µ–º–Ω–æ, –ª–∞–∫–æ–Ω—ñ—á–Ω–æ —ñ –ø–æ —Å—É—Ç—ñ. –î–æ–∑–≤–æ–ª–µ–Ω–∞ –ª–µ–≥–∫–∞ —ñ—Ä–æ–Ω—ñ—è "
    "—â–æ–¥–æ —Ç–∏–ø–æ–≤–∏—Ö ¬´–±–æ–ª–µ–π¬ª –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤ –±–µ–∑ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—ñ. "
    "–ù–µ –¥–æ–ø—É—Å–∫–∞–π –º–æ–≤–∏ –Ω–µ–Ω–∞–≤–∏—Å—Ç—ñ —á–∏ –∑–∞–∫–ª–∏–∫—ñ–≤ –¥–æ –Ω–∞—Å–∏–ª—å—Å—Ç–≤–∞. "
    "–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å–∏—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ‚Äî –ø—Ä–∏–π–º–∏ –æ–ø–∏—Å —ñ —Å—Ç–≤–æ—Ä–∏ —ñ–ª—é—Å—Ç—Ä–∞—Ü—ñ—é."
)

HELP_TEXT = (
    "üëã –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º:\n"
    "‚Ä¢ –ó–≤–µ—Ä—Ç–∞–π—Å—è —Ç–µ–≥–æ–º @—ñ–º º—è_–±–æ—Ç–∞ –∞–±–æ –ø–æ—á–∏–Ω–∞–π –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ª–æ–≤–∞ ¬´–±–æ—Ç¬ª.\n"
    "‚Ä¢ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É: /img <–æ–ø–∏—Å>\n"
    "  –∞–±–æ —Ñ—Ä–∞–∑–∏: ¬´–∑–≥–µ–Ω–µ—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É ‚Ä¶¬ª, ¬´–Ω–∞–º–∞–ª—é–π ‚Ä¶¬ª, ¬´—Å—Ç–≤–æ—Ä–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É ‚Ä¶¬ª.\n"
    "–ü—Ä–∏–∫–ª–∞–¥: /img –∫—ñ—Ç —É –º—É–ª—å—Ç—è—à–Ω–æ–º—É —Å—Ç–∏–ª—ñ, —è—Å–∫—Ä–∞–≤—ñ –∫–æ–ª—å–æ—Ä–∏."
)

RULES_TEXT = (
    "–ü—Ä–∞–≤–∏–ª–∞ Vibe-Coding: –ø–æ–≤–∞–≥–∞, —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤. "
    "–ë–µ–∑ –º–æ–≤–∏ –Ω–µ–Ω–∞–≤–∏—Å—Ç—ñ, –¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞—Ü—ñ—ó —Ç–∞ –∑–∞–∫–ª–∏–∫—ñ–≤ –¥–æ –Ω–∞—Å–∏–ª—å—Å—Ç–≤–∞. "
    "–î—ñ–ª–∏–º–æ—Å—å —ñ–¥–µ—è–º–∏, –∫–æ–¥–æ–º —ñ –¥–æ–ø–æ–º–∞–≥–∞—î–º–æ –æ–¥–Ω–µ –æ–¥–Ω–æ–º—É. –°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ! üá∫üá¶"
)

# ====== –†–û–ó–ü–Ü–ó–ù–ê–í–ê–ù–ù–Ø –ó–ê–ü–ò–¢–Ü–í –ù–ê –ö–ê–†–¢–ò–ù–ö–ò ==================================
IMAGE_PATTERNS = (
    r"\b–∑–≥–µ–Ω–µ—Ä—É–π\s+(–∫–∞—Ä—Ç–∏–Ω–∫—É|–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è|—Ñ–æ—Ç–æ)\b",
    r"\b—Å—Ç–≤–æ—Ä–∏\s+(–∫–∞—Ä—Ç–∏–Ω–∫—É|–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è|—Ñ–æ—Ç–æ|–∞—Ä—Ç)\b",
    r"\b–Ω–∞–º–∞–ª—é–π\b",
    r"^/img\b"
)

def is_image_request(text: str) -> bool:
    t = (text or "").lower().strip()
    return any(re.search(p, t) for p in IMAGE_PATTERNS)

def extract_image_prompt(text: str) -> str:
    """–í–∏—Ä—ñ–∑–∞—î —Å–ª—É–∂–±–æ–≤—ñ —Å–ª–æ–≤–∞ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —á–∏—Å—Ç–∏–π –æ–ø–∏—Å –∑–∞–ø–∏—Ç—É –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."""
    t = text.strip()
    t = re.sub(r"^/img\s*", "", t, flags=re.IGNORECASE)
    t = re.sub(r"^(–∑–≥–µ–Ω–µ—Ä—É–π|—Å—Ç–≤–æ—Ä–∏)\s+(–∫–∞—Ä—Ç–∏–Ω–∫—É|–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è|—Ñ–æ—Ç–æ)\s*[:,\-‚Äì]?\s*", "", t, flags=re.IGNORECASE)
    t = re.sub(r"^–Ω–∞–º–∞–ª—é–π\s*[:,\-‚Äì]?\s*", "", t, flags=re.IGNORECASE)
    return t.strip()

# ====== –î–û–ü–û–ú–û–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ó–û–ë–†–ê–ñ–ï–ù–¨ =====================================
def _download_to_bytes(url: str) -> bytes:
    """–°–∫–∞—á—É—î –∫–∞—Ä—Ç–∏–Ω–∫—É –∑–∞ URL —É –±–∞–π—Ç–∏ (–Ω–∞–¥—ñ–π–Ω—ñ—à–µ, –Ω—ñ–∂ –∫–∏–¥–∞—Ç–∏ URL —É Telegram)."""
    r = requests.get(url, timeout=45)
    r.raise_for_status()
    return r.content

def _image_create_url_first(prompt: str):
    """
    –ü—Ä–æ–±—É—î–º–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ gpt-image-1; —è–∫—â–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ ‚Äî –ø–∞–¥–∞—î–º–æ –Ω–∞ dall-e-3.
    –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ (url, model_name).
    """
    # 1) gpt-image-1
    try:
        resp = openai.Image.create(
            model="gpt-image-1",
            prompt=prompt,
            size="1024x1024",
            n=1,
        )
        return resp["data"][0]["url"], resp.get("model", "gpt-image-1")
    except Exception as e:
        logging.warning("gpt-image-1 failed: %s ‚Äî trying dall-e-3", e)

    # 2) dall-e-3 (—Å—Ç–∞–±—ñ–ª—å–Ω–æ –ø—Ä–∞—Ü—é—î –Ω–∞ openai==0.28)
    resp = openai.Image.create(
        model="dall-e-3",
        prompt=prompt,
        size="1024x1024",
        n=1,
    )
    return resp["data"][0]["url"], resp.get("model", "dall-e-3")

async def generate_image_and_reply(update: Update, prompt: str):
    """–ì–µ–Ω–µ—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –∫–∞—á–∞—î–º–æ –±–∞–π—Ç–∏ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —è–∫ —Ñ–∞–π–ª."""
    try:
        url, used_model = _image_create_url_first(prompt)
        img_bytes = _download_to_bytes(url)

        bio = io.BytesIO(img_bytes)
        bio.name = "image.png"
        bio.seek(0)
        await update.message.reply_photo(bio, caption="–ì–æ—Ç–æ–≤–æ ‚úÖ")
        logging.info("Image OK | model=%s | prompt='%s'", used_model, prompt)

    except Exception as e:
        logging.exception("Image gen error: %s", e)
        await update.message.reply_text(
            "–ù–µ –≤–∏–π—à–ª–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è üòï –°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π –æ–ø–∏—Å (–¥–æ–¥–∞–π ¬´–º—É–ª—å—Ç—è—à–Ω–∏–π —Å—Ç–∏–ª—å¬ª –∞–±–æ ¬´—ñ–ª—é—Å—Ç—Ä–∞—Ü—ñ—è¬ª)."
        )

# ====== –ö–û–ú–ê–ù–î–ò =============================================================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø GPT-–±–æ—Ç Vibe-Coding. –ù–∞–ø–∏—à–∏ ¬´–±–æ—Ç ‚Ä¶¬ª –∞–±–æ —Ç–µ–≥–Ω–∏ @–º–µ–Ω–µ. "
        "–î–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è /img <–æ–ø–∏—Å>."
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT)

async def rules_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(RULES_TEXT)

async def img_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = " ".join(context.args).strip()
    if not prompt:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å: /img <—â–æ –Ω–∞–º–∞–ª—é–≤–∞—Ç–∏>")
        return
    await generate_image_and_reply(update, prompt)

# ====== –û–°–ù–û–í–ù–ê –ß–ê–¢-–õ–û–ì–Ü–ö–ê ==================================================
async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    user_message = update.message.text.strip()

    # –Ø–∫—â–æ —Ü–µ –∑–∞–ø–∏—Ç –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞–≤—ñ—Ç—å –±–µ–∑ —Ç—Ä–∏–≥–µ—Ä–∞ "–±–æ—Ç"
    if is_image_request(user_message):
        prompt = extract_image_prompt(user_message)
        if not prompt:
            await update.message.reply_text("–î–æ–¥–∞–π –æ–ø–∏—Å –¥–æ –∑–∞–ø–∏—Ç—É –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è üôÇ")
            return
        await generate_image_and_reply(update, prompt)
        return

    # –Ü–Ω–∞–∫—à–µ ‚Äî —Ç—Ä–∏–≥–µ—Ä –ø–æ —Ç–µ–≥—É –∞–±–æ –ø–æ —Å–ª–æ–≤—É "–±–æ—Ç" –Ω–∞ –ø–æ—á–∞—Ç–∫—É
    bot_username = (context.bot.username or "").lower()
    entities = update.message.entities or []
    mentioned_bot = any(
        e.type == "mention" and
        user_message[e.offset:e.offset + e.length].lower() == f"@{bot_username}"
        for e in entities
    )
    starts_with_word = user_message.lower().startswith("–±–æ—Ç")
    if not (mentioned_bot or starts_with_word):
        return

    # –¢–µ–∫—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    try:
        completion = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_message}
            ],
            temperature=0.4,
        )
        reply = completion["choices"][0]["message"]["content"].strip()
        await update.message.reply_text(reply)

        usage = completion.get("usage", {})
        logging.info("Chat OK | model=%s | prompt=%s | completion=%s",
                     completion.get("model"), usage.get("prompt_tokens"), usage.get("completion_tokens"))
    except Exception as e:
        logging.exception("OpenAI error: %s", e)
        await update.message.reply_text("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è —Ç–∏–º—á–∞—Å–æ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—ñ –®–Ü. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ üôè")

# ====== –û–ë–†–û–ë–ö–ê –ü–û–ú–ò–õ–û–ö =====================================================
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.exception("Bot error: %s", context.error)

# ====== –ó–ê–ü–£–°–ö ==============================================================-
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("rules", rules_cmd))
    app.add_handler(CommandHandler("img", img_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))
    app.add_error_handler(on_error)
    app.run_polling(drop_pending_updates=True, allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
