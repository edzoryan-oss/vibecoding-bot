import logging
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import openai

# üîë –ö–ª—é—á—ñ –∑ Environment Variables
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

logging.basicConfig(level=logging.INFO)

# üß† –°–ò–°–¢–ï–ú–ù–ò–ô –ü–†–û–ú–ü–¢: –º—ñ—Å—ñ—è —á–∞—Ç—É + —Å—Ç–∏–ª—å
SYSTEM_PROMPT = (
    "–¢–∏ ‚Äî –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —á–∞—Ç—É Vibe-Coding. "
    "–ú–µ—Ç–∞ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏: –Ω–æ–≤–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–¥—É, –¥–µ –®–Ü (LLM) –ø–∏—à–µ –∫–æ–¥, –∞ –ª—é–¥–∏ —Ñ–æ—Ä–º—É–ª—é—é—Ç—å —ñ–¥–µ—ó. "
    "–£ —á–∞—Ç—ñ –¥—ñ–ª–∏–º–æ—Å—å –¥–æ—Å–≤—ñ–¥–æ–º, —ñ–¥–µ—è–º–∏, –∫–æ–¥–æ–º, –¥–æ–ø–æ–º–∞–≥–∞—î–º–æ –æ–¥–Ω–µ –æ–¥–Ω–æ–º—É. –£–∫—Ä–∞—ó–Ω–∞! "
    "–ú–∏ —Ñ–æ—Ä–º—É—î–º–æ —â—ñ–ª—å–Ω–µ –∫–æ–º º—é–Ω—ñ—Ç—ñ, —è–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –®–Ü –¥–ª—è —Å–∫—Ä–∏–ø—Ç—ñ–≤, –ø—Ä–æ–≥—Ä–∞–º, –≤—ñ–¥–µ–æ, –∞—É–¥—ñ–æ —Ç–∞ —ñ–Ω—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤. "
    "–í–∞–π–±–∫–æ–¥–∏–Ω–≥ –∑–∞—Ä–∞–∑ –¥–ª—è –¥–µ–∫–æ–≥–æ –≤–∏–≥–ª—è–¥–∞—î —è–∫ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç, –∞–ª–µ –º–∏ –≤—ñ—Ä–∏–º–æ, —â–æ —Ü–µ –Ω–æ–≤–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç. "
    "–Ñ —Å–∞–π—Ç —Å–ø—ñ–ª—å–Ω–æ—Ç–∏: vibe-coding.com.ua ‚Äî —Ç–æ—á–∫–∞ –∑–±–æ—Ä—É –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏—Ö –≤–∞–π–±–∫–æ–¥–µ—Ä—ñ–≤, –ø—Ä–æ—î–∫—Ç—ñ–≤ —ñ —Ä–æ–±–æ—Ç–∏. "
    "–¢–≤—ñ–π —Å—Ç–∏–ª—å: –¥—É–∂–µ –≤–≤—ñ—á–ª–∏–≤–∏–π, –ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∏–π, –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–∏–π, –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–π —ñ –ø–æ —Å—É—Ç—ñ. "
    "–î–æ–∑–≤–æ–ª–µ–Ω–∞ –ª–µ–≥–∫–∞ —ñ—Ä–æ–Ω—ñ—è —â–æ–¥–æ —Ç–∏–ø–æ–≤–∏—Ö '–±–æ–ª–µ–π' –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤ (–±–µ–∑ –æ–±—Ä–∞–∑ —ñ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—ñ). "
    "–ö–æ–º—É–Ω—ñ–∫—É–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —ñ–Ω—à–æ—é –º–æ–≤–æ—é ‚Äî –≤–≤—ñ—á–ª–∏–≤–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É. "
    "–ë–µ–∑–ø–µ–∫–∞ —ñ –µ—Ç–∏–∫–∞: –Ω–µ –¥–æ–ø—É—Å–∫–∞–π –º–æ–≤–∏ –Ω–µ–Ω–∞–≤–∏—Å—Ç—ñ, –¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞—Ü—ñ—ó, –ø—Ä–∏–Ω–∏–∂–µ–Ω—å –∑–∞ –Ω–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—é/–µ—Ç–Ω—ñ—á–Ω—ñ—Å—Ç—é/—Å—Ç–∞—Ç—Ç—é —Ç–æ—â–æ. "
    "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ –∑–∞–∫–ª–∏–∫–∏ –¥–æ –Ω–∞—Å–∏–ª—å—Å—Ç–≤–∞, –≤–∏–ø—Ä–∞–≤–¥–∞–Ω–Ω—è –∞–≥—Ä–µ—Å—ñ—ó –∞–±–æ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –≤—ñ–π–Ω–∏. "
    "–Ø–∫—â–æ –∑–∞–ø–∏—Ç –ø–æ—Ä—É—à—É—î –ø—Ä–∞–≤–∏–ª–∞ ‚Äî –≤–≤—ñ—á–ª–∏–≤–æ –≤—ñ–¥–º–æ–≤–ª—è–π —ñ –∫–æ—Ä–æ—Ç–∫–æ –ø–æ—è—Å–Ω—é–π –ø—Ä–∏—á–∏–Ω—É, –ø—Ä–æ–ø–æ–Ω—É–π –±–µ–∑–ø–µ—á–Ω—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É. "
    "–ó–∞–≤–∂–¥–∏ –¥–æ–ø–æ–º–∞–≥–∞–π –∑ —ñ–Ω–∂–µ–Ω–µ—Ä—ñ—î—é –ø—ñ–¥–∫–∞–∑–æ–∫, –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏ –∫–æ–¥—É, –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è–º, —ñ–¥–µ—è–º–∏ –¥–ª—è –ø—Ä–æ—î–∫—Ç—ñ–≤."
)

# üõ°Ô∏è –î—É–∂–µ –ø—Ä–æ—Å—Ç–∞ '–º–æ–¥–µ—Ä–∞—Ü—ñ—è' –Ω–∞ –±–æ—Ü—ñ –±–æ—Ç–∞ (–º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏)
BLOCK_LIST = [
    # –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –ø–µ—Ä–µ–ª—ñ–∫—ñ–≤ ‚Äî –ª–∏—à–µ –∑–∞–≥–∞–ª—å–Ω—ñ –º–∞—Ä–∫–µ—Ä–∏, —â–æ–± –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –æ–±—Ä–∞–∑–ª–∏–≤—ñ —Å–ª–æ–≤–∞ —É –∫–æ–¥—ñ
    "–∑–∞–∫–ª–∏–∫ –¥–æ –Ω–∞—Å–∏–ª—å—Å—Ç–≤–∞", "–∑–Ω–∏—â–∏—Ç–∏ –Ω–∞—Ä–æ–¥", "–≥–µ–Ω–æ—Ü–∏–¥", "–Ω–µ–Ω–∞–≤–∏–¥–∂—É –Ω–∞—Ü—ñ—é"
]
def violates_rules(text: str) -> bool:
    tl = text.lower()
    return any(key in tl for key in BLOCK_LIST)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø GPT-–±–æ—Ç Vibe-Coding. –ü–∏—à–∏ –∑ —Ç–µ–≥–æ–º @vibecoding_bot –∞–±–æ –ø–æ—á–∏–Ω–∞–π –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ª–æ–≤–∞ ¬´–±–æ—Ç¬ª üôÇ"
    )

async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    user_message = update.message.text.strip()

    # ‚úÖ –¢—Ä–∏–≥–µ—Ä: —Ç–µ–≥ –∞–±–æ –ø–æ—á–∞—Ç–æ–∫ –∑ "–±–æ—Ç"
    mentioned = bool(update.message.entities and any(e.type == "mention" for e in update.message.entities))
    starts_with_word = user_message.lower().startswith("–±–æ—Ç")

    if not (mentioned or starts_with_word):
        return

    # üõ°Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Å—Ç–∏—Ö –ø–æ—Ä—É—à–µ–Ω—å –ø—Ä–∞–≤–∏–ª
    if violates_rules(user_message):
        await update.message.reply_text(
            "–Ø –∑–∞ –±–µ–∑–ø–µ—á–Ω—É —Ç–∞ –ø–æ–≤–∞–∂–Ω—É –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—é. –£ —á–∞—Ç—ñ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∞ –º–æ–≤–∞ –Ω–µ–Ω–∞–≤–∏—Å—Ç—ñ, "
            "–¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞—Ü—ñ—è —Ç–∞ –∑–∞–∫–ª–∏–∫–∏ –¥–æ –Ω–∞—Å–∏–ª—å—Å—Ç–≤–∞. –°—Ñ–æ—Ä–º—É–ª—é–π, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ-—ñ–Ω—à–æ–º—É üôè"
        )
        return

    try:
        completion = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_message}
            ],
            temperature=0.4,
        )
        reply = completion["choices"][0]["message"]["content"].strip()
        await update.message.reply_text(reply)
    except Exception as e:
        logging.exception("OpenAI error: %s", e)
        await update.message.reply_text(
            "–í–∏–±–∞—á, —Ç–∏–º—á–∞—Å–æ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –®–Ü. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∑–∞ —Ö–≤–∏–ª–∏–Ω–∫—É üôè"
        )

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))
    app.run_polling()

if __name__ == "__main__":
    main()
